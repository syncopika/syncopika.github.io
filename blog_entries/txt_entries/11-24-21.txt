--title
taking a closer look at asynchronous JavaScript

--date
11/24/21

--tags
programming, javascript

--content

--p
Recently I thought about async/await in JavaScript and I (again) got confused how using await differed from just regular synchronous, blocking code.
From what I understand, await itself does block, but just the function it's running in (I think <b><a href="https://softwareengineering.stackexchange.com/questions/183576/asyncawait-sync">this post</a></b> is fairly helpful); it doesn't prevent other code from running asynchronously because the function await is waiting on could be running asynchronous code.

--p
I also happened upon <b><a href="https://rclayton.silvrback.com/avoid-synchronous-functions-in-node-js">this blog post</a></b> by Richard Clayton and was inspired to compare the performance of doing things synchronously vs asynchronously.

--h3
experiment:

--p
Let's have a look at this code snippet, for example, with Node.js:
--code
const fs = require("fs");
const util = require("util");

async function main(){
    // reading files synchronously
    const start = Date.now();
    const file1 = fs.readFileSync("test.txt");
    const file2 = fs.readFileSync("test2.txt");
    const end = Date.now();
    console.log("start: " + start);
    console.log("end: " + end);
    
    console.log("-------------------------");
    
    // now reading files "synchronously" using await
    // note that fs.readFile needs to be promisified
    // so it will return a Promise
    const readFile = util.promisify(fs.readFile);
    const start2 = Date.now();
    const f1 = await readFile("test.txt");
    const f2 = await readFile("test2.txt");
    const end2 = Date.now();
    console.log("start: " + start2);
    console.log("end: " + end2);
    
    console.log("-------------------------");
    // gathering up the results of a bunch of async tasks
    // I think highlights a use case for needing async functionality,
    // even though a lot of examples out there demo async/await
    // in a synchronous process (e.g. just await on one thing)
    // in this way we allow the reading of multiple files to
    // happen asynchronously (so concurrently, but not parallel), 
    // which should allow a performance advantage
    // over synchronously (especially with a large enough numbers of files)
    const start3 = Date.now();
    const res = await Promise.all([readFile("test.txt"), readFile("test2.txt")]);
    const end3 = Date.now();
    console.log("start: " + start3);
    console.log("end: " + end3);
}

main();

--endcode

--p
text.txt and text2.txt aren't large files at all and they just have a line of text in each of them.
Below are my results in 5 consecutive runs:

--code
// run 1
start: 1638057607490
end: 1638057607509
-------------------------
start: 1638057607532
end: 1638057607543
-------------------------
start: 1638057607545
end: 1638057607560

// run 2
start: 1638057609003
end: 1638057609003
-------------------------
start: 1638057609012
end: 1638057609019
-------------------------
start: 1638057609021
end: 1638057609022

// run 3
start: 1638057610310
end: 1638057610310
-------------------------
start: 1638057610319
end: 1638057610325
-------------------------
start: 1638057610327
end: 1638057610328

// run 4
start: 1638057724608
end: 1638057724608
-------------------------
start: 1638057724617
end: 1638057724623
-------------------------
start: 1638057724624
end: 1638057724626

// run 5
start: 1638057728654
end: 1638057728655
-------------------------
start: 1638057728664
end: 1638057728669
-------------------------
start: 1638057728671
end: 1638057728672

--endcode

--p
note: I think the very first run took an unusually long time for each task because it was the first time running the program in a while (although I don't know the exact cause for why that is).

--h3
results:

--p
From this little experiment we can see it took, on average, 4ms for the synchronous way, 7ms for using await in a synchronous manner, and 4ms for using await but letting the read operation for each file run asynchronously.
Overall I think the results make sense - using await in a synchronous manner (the 2nd task) took longer than letting readFile run asynchronously for each file and then awaiting the completion of reading all the files (the 3rd task); in the latter scenario, all the files can be sort of worked on at the "same" time, whereas in the former each file needs to be read to completion before the next one can be started. The 1st task, where readFileSync is used, seemed pretty fast. I would guess this seemingly fast performance may be because my sample size is so small with just 2 files (which would be consistent with Richard Clayton's experience).

--p
For an even better comparison of async vs sync on performance, it would be interesting to try this experiment on different numbers of files and variable-sized files!

--p
The code snippet and test files are <b><a href="https://github.com/syncopika/syncopika.github.io/tree/newstuff/blog_entries/content">here</a></b> to play with. 
If any technical, spelling or grammatical errors are present, please feel free to let me know via an issue <b><a href="https://github.com/syncopika/syncopika.github.io">here</a></b>.
<br> Thanks for reading!

--p
edited 12/4/21